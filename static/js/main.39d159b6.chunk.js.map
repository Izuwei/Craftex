{"version":3,"sources":["components/TopPanel.jsx","components/EditorIn.jsx","components/EditorOut.jsx","components/SplitEditor.jsx","components/ToolTab.jsx","App.js","serviceWorker.js","index.js"],"names":["TopPanel","className","Component","EditorIn","props","onChange","bind","onSelectionChange","newValue","console","log","event","content","this","refs","ace","editor","getSelectedText","theme","fontSize","ref","name","height","width","placeholder","showPrintMargin","hScrollBarAlwaysVisible","editorProps","$blockScrolling","EditorOut","state","readOnly","SplitEditor","split","style","position","minSize","defaultSize","size","localStorage","setItem","TabPanel","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","createMuiTheme","palette","primary","main","lightBlue","light","dark","type","useStyles","makeStyles","root","flexGrow","marginTop","backgroundColor","background","paper","color","ScrollableTabsButtonAuto","classes","React","useState","setValue","AppBar","Tabs","indicatorColor","textColor","variant","aria-label","centered","Tab","label","grey","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39d159b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TopPanel.css';\n\nclass TopPanel extends Component {\n    render() {\n        return (\n            <nav className=\"topPanel\">\n                <span className=\"app-name\">React App</span>\n                <div className=\"menu\">\n                    <button className=\"menu-button\">\n                        <div className=\"button-line\" />\n                        <div className=\"button-line\" />\n                        <div className=\"button-line\" />\n                    </button>\n                    {/*<ul>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                    </ul>*/}\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default TopPanel;","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport 'ace-builds/src-noconflict/ext-searchbox';\nimport \"ace-builds/src-noconflict/theme-idle_fingers\";\n \n\nclass EditorIn extends Component {\n  onChange(newValue) {\n    console.log(\"change\", newValue);\n  }\n  \n  onSelectionChange(newValue, event) {\n    const content = this.refs.ace.editor.getSelectedText();\n    console.log(content);\n  }\n\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n  }\n//<button onClick={()=> {this.refs.ace.editor.undo()}}>Undo</button>\n  render() { \n        return ( \n        <AceEditor\n            theme=\"idle_fingers\"\n            fontSize=\"20px\"\n            onChange={this.onChange}\n            onSelectionChange={this.onSelectionChange}\n            ref=\"ace\"\n            name=\"EditorIn\"\n            height=\"700px\"\n            width=\"100%\"\n            placeholder=\"Insert your input here\"\n            showPrintMargin={false}\n            hScrollBarAlwaysVisible={true}\n            editorProps={{ $blockScrolling: true }}\n        />);\n    }\n}\n \nexport default EditorIn;","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/theme-idle_fingers\";\n \nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\nclass EditorOut extends Component {\n    state = {  }\n    render() { \n        return ( \n        <AceEditor\n            theme=\"idle_fingers\"\n            fontSize=\"20px\"\n            onChange={onChange}\n            name=\"EditorOut\"\n            height=\"700px\"\n            width=\"100%\"\n            readOnly={true}\n            placeholder=\"Your output will be here\"\n            showPrintMargin={false}\n            hScrollBarAlwaysVisible={true}\n            editorProps={{ $blockScrolling: true }}\n          /> );\n    }\n}\n \nexport default EditorOut;","import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport EditorIn from './EditorIn'\nimport EditorOut from './EditorOut'\nimport './SplitEditor.css';\n\nclass SplitEditor extends Component {\n    state = {  }\n    render() { \n        return ( \n            <SplitPane className=\"SplitEditor\" split=\"vertical\" style={{height: \"700px\", position: \"static\"}} minSize={200} defaultSize={\"50%\"} onChange={ size => localStorage.setItem('splitPos', size) }>\n                <div className=\"Editor1\">\n                    <EditorIn />\n                </div>\n                <div className=\"Editor2\">\n                    <EditorOut />\n                </div>\n            </SplitPane>\n         );\n    }\n}\n \nexport default SplitEditor;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Tabs, Tab } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { lightBlue } from '@material-ui/core/colors';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: lightBlue[800],\n      light: lightBlue[200],\n      dark: lightBlue[900],\n    },\n    type: 'dark',\n  }\n})\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginTop: '20px',\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    color: 'white',\n  },\n}));\n\nexport default function ScrollableTabsButtonAuto() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n            aria-label=\"tabs\"\n            centered\n          >\n            <Tab label=\"Reverse\" {...a11yProps(0)} />\n            <Tab label=\"Replace\" {...a11yProps(1)} />\n            <Tab label=\"Rows\" {...a11yProps(2)} />\n            <Tab label=\"Columns\" {...a11yProps(3)} />\n            <Tab label=\"Convert\" {...a11yProps(4)} />\n          </Tabs>\n        </AppBar>\n        <TabPanel theme={theme} value={value} index={0}>\n          TBD\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          TBD\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          TBD\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          TBD\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          TBD\n        </TabPanel>\n      </div>\n    </MuiThemeProvider>\n  );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TopPanel from './components/TopPanel';\nimport SplitEditor from './components/SplitEditor';\nimport ToolTab from './components/ToolTab';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: grey[50],\n    },\n    type: 'dark',\n  }\n})\n\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n      <div className=\"App\">\n        <TopPanel />\n        <SplitEditor />\n        <ToolTab />\n      </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}