{"version":3,"sources":["components/TopPanel.jsx","components/EditorIn.jsx","components/EditorOut.jsx","components/SplitEditor.jsx","App.js","serviceWorker.js","index.js"],"names":["TopPanel","className","Component","onChange","newValue","console","log","EditorIn","state","theme","fontSize","name","height","width","placeholder","showPrintMargin","hScrollBarAlwaysVisible","editorProps","$blockScrolling","EditorOut","readOnly","SplitEditor","split","style","minSize","defaultSize","size","localStorage","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TA0BeA,G,6LArBP,OACI,yBAAKC,UAAU,YACX,0BAAMA,UAAU,YAAhB,aACA,yBAAKA,UAAU,QACX,4BAAQA,UAAU,eACd,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,uB,GAThBC,c,8BCEvB,SAASC,EAASC,GAChBC,QAAQC,IAAI,SAAUF,G,IAsBTG,E,2MAlBXC,MAAQ,G,wEAEJ,OACA,kBAAC,IAAD,CACIC,MAAM,eACNC,SAAS,OACTP,SAAUA,EACVQ,KAAK,WACLC,OAAO,QACPC,MAAM,OACNC,YAAY,yBACZC,iBAAiB,EACjBC,yBAAyB,EACzBC,YAAa,CAAEC,iBAAiB,S,GAdrBhB,aCJvB,SAASC,EAASC,GAChBC,QAAQC,IAAI,SAAUF,G,IAuBTe,E,2MAnBXX,MAAQ,G,wEAEJ,OACA,kBAAC,IAAD,CACIC,MAAM,eACNC,SAAS,OACTP,SAAUA,EACVQ,KAAK,YACLC,OAAO,QACPC,MAAM,OACNO,UAAU,EACVN,YAAY,2BACZC,iBAAiB,EACjBC,yBAAyB,EACzBC,YAAa,CAAEC,iBAAiB,S,GAfpBhB,aCaTmB,G,iNAfXb,MAAQ,G,wEAEJ,OACI,kBAAC,IAAD,CAAWP,UAAU,cAAcqB,MAAM,WAAWC,MAAO,CAACX,OAAQ,SAAUY,QAAS,IAAKC,YAAa,MAAOtB,SAAW,SAAAuB,GAAI,OAAIC,aAAaC,QAAQ,WAAYF,KAChK,yBAAKzB,UAAU,WACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,Y,GATMC,cCUX2B,E,iLATX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUC,aCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d0aadc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TopPanel.css';\n\nclass TopPanel extends Component {\n    render() {\n        return (\n            <nav className=\"topPanel\">\n                <span className=\"app-name\">React App</span>\n                <div className=\"menu\">\n                    <button className=\"menu-button\">\n                        <div className=\"button-line\" />\n                        <div className=\"button-line\" />\n                        <div className=\"button-line\" />\n                    </button>\n                    {/*<ul>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                        <li><a href=\"/\">Place holder</a></li>\n                    </ul>*/}\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default TopPanel;","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-min-noconflict/theme-idle_fingers\"\n \nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\nclass EditorIn extends Component {\n    state = {  }\n    render() { \n        return ( \n        <AceEditor\n            theme=\"idle_fingers\"\n            fontSize=\"20px\"\n            onChange={onChange}\n            name=\"EditorIn\"\n            height=\"700px\"\n            width=\"100%\"\n            placeholder=\"Insert your input here\"\n            showPrintMargin={false}\n            hScrollBarAlwaysVisible={true}\n            editorProps={{ $blockScrolling: true }}\n          /> );\n    }\n}\n \nexport default EditorIn;","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-min-noconflict/theme-idle_fingers\"\n \nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\nclass EditorOut extends Component {\n    state = {  }\n    render() { \n        return ( \n        <AceEditor\n            theme=\"idle_fingers\"\n            fontSize=\"20px\"\n            onChange={onChange}\n            name=\"EditorOut\"\n            height=\"700px\"\n            width=\"100%\"\n            readOnly={true}\n            placeholder=\"Your output will be here\"\n            showPrintMargin={false}\n            hScrollBarAlwaysVisible={true}\n            editorProps={{ $blockScrolling: true }}\n          /> );\n    }\n}\n \nexport default EditorOut;","import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport EditorIn from './EditorIn'\nimport EditorOut from './EditorOut'\nimport './SplitEditor.css';\n\nclass SplitEditor extends Component {\n    state = {  }\n    render() { \n        return ( \n            <SplitPane className=\"SplitEditor\" split=\"vertical\" style={{height: \"700px\"}} minSize={200} defaultSize={\"50%\"} onChange={ size => localStorage.setItem('splitPos', size) }>\n                <div className=\"Editor1\">\n                    <EditorIn />\n                </div>\n                <div className=\"Editor2\">\n                    <EditorOut />\n                </div>\n            </SplitPane>\n         );\n    }\n}\n \nexport default SplitEditor;","import React, { Component } from 'react';\nimport './App.css';\nimport TopPanel from './components/TopPanel';\nimport SplitEditor from './components/SplitEditor';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopPanel />\n        <SplitEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}